#+TITLE: NClasses

NClasses provides helper macros to help write classes and conditions with less
boilerplate.

It's a fork of [[https://github.com/hu-dwim/hu.dwim.defclass-star][hu.dwim.defclass-star]].

** Motivation

- =hu.dwim.defclass-star= has a symbol export bug which cannot be fixed
  upstream, see https://github.com/hu-dwim/hu.dwim.defclass-star/pull/7 and
  https://github.com/hu-dwim/hu.dwim.defclass-star/issues/12 for a discussion.

- The macro and package names of hu.dwim.defclass-star prove to be rather
  unwieldy.
  Emacs can automatically highlight =define-class= as a macro, but not
  =defclass*=.

- This library offers new features that wouldn't be accepted upstream, like
  [[https://github.com/hu-dwim/hu.dwim.defclass-star/pull/3][type inference]].

** Examples

A basic session:

# TODO: Finish me!

#+begin_src lisp
  (define-class foo ()
    ((slot1 :initarg nil)
     (slot2 \"hello!\")
     (unexported-slot :export nil))
    (:export-class-name-p t)
    (:export-accessor-names-p t)
    (:accessor-name-transformer #'nclasses:default-accessor-name-transformer))

  (make-instance 'foo :my-slot1 17)
#+end_src

See the [[file:package.lisp][package]] documentation for a usage guide and more examples.

** Default class options

If you want to change the default class options, say, for a package, you can
simply define a wrapping macro (without importing =nclasses:define-start=):

#+begin_src lisp
  (defmacro define-class (name supers slots &rest options)
    "`nclasses:define-star' with automatic types and always-dashed predicates."
    `(nclasses:define-class ,name ,supers ,slots
       ,@(append
          '((:automatic-types-p t)
            (:predicate-name-transformer 'nclasses:always-dashed-predicate-name-transformer))
          options)))
#+end_src

** Changes from =defclass-star=

- Renamed =defclass*= to =define-class=.
- Renamed =defcondition*= to =define-condition*=.
- Only the core system has been kept, the ContextL, hu.dwim.def and Swank
  optional features have been removed.
- New predicate name transformers =always-dashed-predicate-name-transformer= and
  =question-mark-predicate-name-transformer=.
- New type inference options: =:automatic-types-p= and =:type-inference=.
- Default accessor transformer now follows the slot name.
  hu.dwim.defclass-star default accessor is available as
  =dwim-accessor-name-transformer=.
- Bug fixes:
  - No longer try to export =NIL=.
  - Always return the class.
  - Avoid unneeded =progn=.
  - Do not generate accessors in foreign packages when =:accessor-name-package=
    is =:slot-name= and =:accessor= is not provided.

** Change Log

*** 0.2.0

- Fix =export-predicate-name-p= class option.
- Allow type inference to check for types in superclasses.

** Alternatives

=defclass/std= is another popular library with a similar goal, but with more
insistance on conciseness, maybe at the expanse of readability.  In particular,
it implements a way to specify slots by properties which may seem unnatural (we
read slots by their name, not by their properties).

** Implementation notes

Metaclasses would not be very useful here since most of our features need to be
enacted at compile-time, while metaclasses are mostly useful on classe
/instances/.

** History

NClasses was originally developed for [[https://nyxt.atlas.engineer][Nyxt]], so the "N" may stand for it, or
"New", or whatever poetic meaning you may find behind it!
